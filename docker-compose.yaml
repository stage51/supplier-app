version: '3.9'

services:
  gateway:
    container_name: gateway
    build:
      context: ./supplier-gateway
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    volumes:
      - ./logstash/logs/application.log:/app/logs/application.log
    environment:
      SERVER_PORT: 8082
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      GRPC_HOST: domain-service
      GRPC_PORT: 50051
      RABBIT_QUEUE: eventQueue
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      SPRING_RABBITMQ_VIRTUAL_HOST: /
    depends_on:
      - rabbitmq
      - redis
      - domain-service
    networks:
      - app-network
    restart: unless-stopped

  domain-service:
    container_name: domain
    build:
      context: ./supplier-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
      - "50051:50051"
    environment:
      SERVER_PORT: 8080
      RABBIT_QUEUE: eventQueue
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: domain
      GRPC_PORT: 50051
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      SPRING_RABBITMQ_VIRTUAL_HOST: /
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - app-network
    restart: unless-stopped

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - app-network
    restart: unless-stopped

  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: domain
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:6.20
    container_name: pgadmin
    depends_on:
      - postgres
    ports:
      - "8081:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@mail.ru
      PGADMIN_DEFAULT_PASSWORD: admin
    networks:
      - app-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - app-network
    restart: unless-stopped

  elasticsearch:
    image: elasticsearch:8.12.2
    container_name: elasticsearch
    environment:
      discovery.type: single-node
      xpack.security.enabled: false
    ports:
      - "9200:9200"
    networks:
      - app-network
    restart: unless-stopped

  logstash:
    image: logstash:8.12.2
    container_name: logstash
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logstash/logs/application.log:/app/logs/application.log
    depends_on:
      - elasticsearch
    ports:
      - "5044:5044"
      - "5001:5000"
      - "9600:9600"
    networks:
      - app-network
    restart: unless-stopped

  kibana:
    image: kibana:8.12.2
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - app-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

volumes:
  postgres_data:
networks:
  app-network:
    driver: bridge

